@model Workers.ModelsView.VacationTwo;
@{
    ViewData["Title"] = "AddnewVacation";
}

<h2>AddnewVacation</h2>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
    <link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" integrity="sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN" crossorigin="anonymous">
    <script src="https://unpkg.com/gijgo@1.9.13/js/gijgo.min.js" type="text/javascript"></script>
    <link href="https://unpkg.com/gijgo@1.9.13/css/gijgo.min.css" rel="stylesheet" type="text/css" />
    <script src="//cdnjs.cloudflare.com/ajax/libs/moment.js/2.7.0/moment.min.js" type="text/javascript"></script>
</head>
<body>
    @{
        ViewData["Title"] = "CreateHolydays";
    }
    @using (Html.BeginForm("CreateNewVacation", "Vacation", FormMethod.Post))
    {
        <div class="container">
            Start Date: @Html.TextBoxFor(model => model.startDay, new { @id = "startDate", @width = "276" })
            @*<input id="startDate" width="276" />*@
            @*End Date: <input id="endDate" width="276" />.*@
            End Date: @Html.TextBoxFor(model => model.EndDay, new { @id = "endDate", @width = "276" })
        </div>
        <button type="submit" class=" btn btn-primary btn-lg btn-block">Save Date</button>
    }
    <script>
        var today = new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate());
        $('#startDate').datepicker({
            uiLibrary: 'bootstrap4',
            iconsLibrary: 'fontawesome',
            minDate: today,
            maxDate: function () {
                 /*console.log("datepicker1");*/
                return $('#endDate').val();
            }
        });
        $('#endDate').datepicker({
            uiLibrary: 'bootstrap4',
            iconsLibrary: 'fontawesome',
            minDate: function () {
                return $('#startDate').val();
            },
            maxDate: function ()
            {
               
              /*  console.log("datepicker2");*/
                let startDate = new Date( document.getElementById('startDate').value);
                let newdate = new Date(startDate);
                newdate.setDate(newdate.getDate() + GetAddDays(startDate)-1);
          
                return newdate;
            }
        });
        function GetAddDays(startDate)
        {
            
            
            var date =moment( new Date(startDate));
           moment(date).format('MM/DD/YYYY');
             let IndexDay = @ViewBag.AddDays;
                   console.log(IndexDay);
                for (let i = 0; i <= IndexDay; i++)
                {
                    if (moment(date).day()== 6 || moment(date).day() == 0 || AuditDate(date))
                    {
                       
                        /*     debugger;*/
                        console.log("this is Index++");
                           console.log(IndexDay);
                        IndexDay ++;
                 
                    }
                   
                    date = moment(date).add(1, 'days').format('MM/DD/YYYY');
            }
            console.log(IndexDay);
            console.log("Finish");
            return IndexDay;
        }
        function AuditDate(startDate)
        {
            let checkonHolydays=false
            let IndexDay = @ViewBag.AddDays;
            
       
            let Weekends = [];
            Weekends=@Html.Raw(Json.Serialize(ViewBag.weekends));
          

            Weekends.forEach((e) => {
           
               if ((moment(startDate) >=moment(new Date (e.startDate)).month() && moment(startDate) <= moment(new Date (e.endDate))))
               {
                   console.log("this is true");
                   checkonHolydays = true;
               }
                
            })
            return checkonHolydays;
        }
    </script>
</body>
